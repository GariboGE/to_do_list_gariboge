name: To Do List Tests

on:
  push:
    branches:
      - dev

jobs:
  run-tests:
    runs-on: ubuntu-22.04

    env:
      OAUTH_CLIENT_ID: ${{ secrets.OAUTH_CLIENT_ID }}
      OAUTH_CLIENT_SECRET: ${{ secrets.OAUTH_CLIENT_SECRET }}
      OAUTH_REDIRECT_URI: http://localhost:5000/oauth/auth/callback

    steps:

      # üöÄ 1. Checkout del c√≥digo fuente
      - name: Checkout code
        uses: actions/checkout@v3

      # üêç 2. Configurar Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      # üì¶ 3. Instalar dependencias de Python
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # üõ†Ô∏è 4. Actualizar e instalar dependencias del sistema y Playwright
      - name: Update and Install System & Playwright Dependencies
        run: |
          # Actualizar el sistema y repositorios
          sudo apt update && sudo apt upgrade -y

          # Agregar repositorios adicionales necesarios
          sudo add-apt-repository multiverse -y
          sudo add-apt-repository universe -y
          sudo add-apt-repository restricted -y
          sudo add-apt-repository ppa:graphics-drivers/ppa -y
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y
          sudo apt update

          # Instalar paquetes b√°sicos y dependencias necesarias
          sudo apt install -y \
            software-properties-common \
            gnupg \
            curl \
            ubuntu-restricted-extras \
            ffmpeg \
            libavcodec-extra \
            libavif-dev \
            libglib2.0-0 \
            libgtk-3-0 \
            libpango1.0-0 \
            libx264 \
            libssl-dev \
            libevent-2.1-7 \
            libopus0 \
            libavif13

          # Instalar Playwright y dependencias necesarias
          playwright install

      # üöÄ 5. Ejecutar la aplicaci√≥n Flask para Testing
      - name: Run Flask (Test App)
        run: |
          export FLASK_APP=app.py
          flask run --host=localhost --port=5000 &

      # ‚úÖ 6. Ejecutar pruebas con pytest y generar reporte de cobertura
      - name: Run tests
        run: |
          pytest --cov=app --cov-report=html
